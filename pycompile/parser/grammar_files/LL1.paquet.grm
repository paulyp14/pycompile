<AParams> ::= <Expr> make-expr <AParamsTail>
<AParams> ::= EPSILON 

<AParamsTail> ::= ',' <Expr> make-expr <AParamsTail> 
<AParamsTail> ::= EPSILON 

<AddOp> ::= '+'
<AddOp> ::= '-'
<AddOp> ::= 'or'

<ArithExpr> ::= <Term> make-term <ArithExprTail>

<ArithExprTail> ::= <AddOp> push-op <Term> make-term make-operator <ArithExprTail>
<ArithExprTail> ::= EPSILON 

<ArraySizeRept> ::= '[' <IntNum> ']' <ArraySizeRept>
<ArraySizeRept> ::= EPSILON 

<AssignOp> ::= 'assign'

<AssignStatTail> ::= <AssignOp> push-op <Expr> make-expr make-operator

<ClassDecl> ::= 'class' 'id' make-leaf <Inherit> '{' <ClassDeclBody> make-membList '}' ';' make-classDecl <ClassDecl>
<ClassDecl> ::= EPSILON 

<ClassDeclBody> ::= <Visibility> <MemberDecl> <ClassDeclBody>
<ClassDeclBody> ::= EPSILON 

<ClassMethod> ::= 'sr' make-sr 'id' make-leaf
<ClassMethod> ::= EPSILON 

<Expr> ::= <ArithExpr> make-arithExp <ExprTail> 

<ExprTail> ::= <RelOp> push-op <ArithExpr> make-arithExp make-operator
<ExprTail> ::= EPSILON 

<FParams> ::= <Type> 'id' make-leaf make-arSep <ArraySizeRept> make-aRList make-fParam <FParamsTail>
<FParams> ::= EPSILON 

<FParamsTail> ::= ',' <Type> 'id' make-leaf make-arSep <ArraySizeRept> make-aRList make-fParam <FParamsTail>
<FParamsTail> ::= EPSILON 

<Factor> ::= <FuncOrVar> 
<Factor> ::= 'intnum' make-leaf 
<Factor> ::= 'floatnum' make-leaf 
<Factor> ::= 'stringlit' make-leaf 
<Factor> ::= '(' <Expr> make-expr ')'
<Factor> ::= 'not' make-leaf <Factor> make-factor make-negation
<Factor> ::= <Sign> <Factor> make-factor make-signed
<Factor> ::= 'qm' '[' <Expr> make-expr ':' <Expr> make-expr ':' <Expr> make-expr ']' make-tern

<FuncBody> ::= '{' <MethodBodyVar> <StatementList> make-statList make-funcBody '}'

<FuncDecl> ::= 'func' 'id' make-leaf '(' <FParams> make-fPList ')' ':' <FuncDeclTail> ';' make-funcDecl

<FuncDeclTail> ::= <Type> 
<FuncDeclTail> ::= 'void' make-leaf

<FuncDef> ::= <Function> <FuncDef> 
<FuncDef> ::= EPSILON 

<FuncHead> ::= 'func' 'id' make-leaf <ClassMethod> '(' <FParams> make-fPList ')' ':' <FuncDeclTail> make-funcDecl

<FuncOrAssignStat> ::= 'id' make-leaf <FuncOrAssignStatIdnest>

<FuncOrAssignStatIdnest> ::= make-arSep <IndiceRep> make-indList <FuncOrAssignStatIdnestVarTail>
<FuncOrAssignStatIdnest> ::= '(' make-arSep <AParams> make-aPList ')' <FuncOrAssignStatIdnestFuncTail>

<FuncOrAssignStatIdnestFuncTail> ::= '.' 'id' make-leaf <FuncStatTail> 
<FuncOrAssignStatIdnestFuncTail> ::= EPSILON make-var

<FuncStatTail> ::= make-arSep <IndiceRep> make-indList <FuncStatTailIdnest>
<FuncStatTail> ::= '(' make-arSep <AParams> make-aPList ')' <FuncStatTailIdnest>

<FuncStatTailIdnest> ::= '.' 'id' make-leaf <FuncStatTail>
<FuncStatTailIdnest> ::= EPSILON make-var

<FuncOrAssignStatIdnestVarTail> ::= '.' 'id' make-leaf <FuncOrAssignStatIdnest> 
<FuncOrAssignStatIdnestVarTail> ::= make-var <AssignStatTail>

<FuncOrVar> ::= 'id' make-leaf <FuncOrVarIdnest> 

<FuncOrVarIdnest> ::= make-arSep <IndiceRep> make-indList <FuncOrVarIdnestTail>
<FuncOrVarIdnest> ::= '(' make-arSep <AParams> make-aPList ')' <FuncOrVarIdnestTail>

<FuncOrVarIdnestTail> ::= '.' 'id' make-leaf <FuncOrVarIdnest> 
<FuncOrVarIdnestTail> ::= EPSILON make-var

<Function> ::= <FuncHead> <FuncBody> make-funcDef

<IndiceRep> ::= '[' <Expr> make-expr ']' <IndiceRep>
<IndiceRep> ::= EPSILON 

<Inherit> ::= 'inherits' make-arSep 'id' make-leaf <NestedId> make-inherList
<Inherit> ::= EPSILON 

<IntNum> ::= 'intnum' make-leaf 
<IntNum> ::= EPSILON 

<MemberDecl> ::= <FuncDecl>
<MemberDecl> ::= <VarDecl> make-varDecl

<MethodBodyVar> ::= 'var' '{' <VarDeclRep> '}' make-varDList
<MethodBodyVar> ::= EPSILON 

<MultOp> ::= '*'
<MultOp> ::= '/'
<MultOp> ::= 'and'

<NestedId> ::= ',' 'id' make-leaf <NestedId>
<NestedId> ::= EPSILON 

<Prog> ::= <ClassDecl> make-classList <FuncDef> make-funcDL 'main' <FuncBody>

<RelOp> ::= 'eq'
<RelOp> ::= 'neq'
<RelOp> ::= 'lt'
<RelOp> ::= 'gt'
<RelOp> ::= 'leq'
<RelOp> ::= 'geq'

<START> ::= <Prog> make-Prog

<Sign> ::= '+' make-leaf
<Sign> ::= '-' make-leaf

<StatBlock> ::= '{' <StatementList> make-statList '}'
<StatBlock> ::= <Statement> make-stat
<StatBlock> ::= EPSILON

<Statement> ::= <FuncOrAssignStat> ';' 
<Statement> ::= 'if' '(' <Expr> make-expr ')' 'then' <StatBlock> 'else' <StatBlock> ';' make-IF
<Statement> ::= 'while' '(' <Expr> make-expr ')' <StatBlock> ';' make-WHILE
<Statement> ::= 'read' '(' <Variable> ')' ';' make-READ
<Statement> ::= 'write' '(' <Expr> make-expr ')' ';' make-WRITE
<Statement> ::= 'return' '(' <Expr> make-expr ')' ';' make-RETURN
<Statement> ::= 'break' ';' make-BREAK
<Statement> ::= 'continue' ';' make-CONTINUE

<StatementList> ::= <Statement> make-stat <StatementList>
<StatementList> ::= EPSILON 

<Term> ::= <Factor> make-factor <TermTail> 

<TermTail> ::= <MultOp> push-op <Factor> make-factor make-operator <TermTail>
<TermTail> ::= EPSILON 

<Type> ::= 'integer' make-leaf
<Type> ::= 'float' make-leaf
<Type> ::= 'string' make-leaf
<Type> ::= 'id' make-leaf 

<VarDecl> ::= <Type> 'id' make-leaf make-arSep <ArraySizeRept> make-aRList ';'

<VarDeclRep> ::= <VarDecl> make-varDecl <VarDeclRep>
<VarDeclRep> ::= EPSILON 

<Variable> ::= 'id' make-leaf <VariableIdnest> make-var

<VariableIdnest> ::= make-arSep <IndiceRep> make-indList <VariableIdnestTail>

<VariableIdnestTail> ::= '.' 'id' make-leaf <VariableIdnest> 
<VariableIdnestTail> ::= EPSILON 

<Visibility> ::= 'public' make-leaf make-vis
<Visibility> ::= 'private' make-leaf make-vis
<Visibility> ::= EPSILON 


